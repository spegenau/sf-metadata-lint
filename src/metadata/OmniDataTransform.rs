use crate::metadata::OmniDataTransformInputType::OmniDataTransformInputType;
use crate::metadata::OmniDataTransformItem::OmniDataTransformItem;
use serde::{Deserialize};

#[derive(Debug, Deserialize)]
pub struct OmniDataTransform  {
	#[serde(rename = "active")]
	pub active: Option<bool>,
	#[serde(rename = "assignmentRulesUsed")]
	pub assignment_rules_used: Option<bool>,
	#[serde(rename = "deletedOnSuccess")]
	pub deleted_on_success: Option<bool>,
	#[serde(rename = "description")]
	pub description: Option<String>,
	#[serde(rename = "errorIgnored")]
	pub error_ignored: Option<bool>,
	#[serde(rename = "expectedInputJson")]
	pub expected_input_json: Option<String>,
	#[serde(rename = "expectedInputOtherData")]
	pub expected_input_other_data: Option<String>,
	#[serde(rename = "expectedInputXml")]
	pub expected_input_xml: Option<String>,
	#[serde(rename = "expectedOutputJson")]
	pub expected_output_json: Option<String>,
	#[serde(rename = "expectedOutputOtherData")]
	pub expected_output_other_data: Option<String>,
	#[serde(rename = "expectedOutputXml")]
	pub expected_output_xml: Option<String>,
	#[serde(rename = "fieldLevelSecurityEnabled")]
	pub field_level_security_enabled: Option<bool>,
	#[serde(rename = "inputParsingClass")]
	pub input_parsing_class: Option<String>,
	#[serde(rename = "inputType")]
	pub input_type: Option<OmniDataTransformInputType>,
	#[serde(rename = "name")]
	pub name: String,
	#[serde(rename = "namespace")]
	pub namespace: Option<String>,
	#[serde(rename = "nullInputsIncludedInOutput")]
	pub null_inputs_included_in_output: Option<bool>,
	#[serde(rename = "omniDataTransformItem")]
	pub omni_data_transform_item: Option<Vec<OmniDataTransformItem>>,
	#[serde(rename = "outputParsingClass")]
	pub output_parsing_class: Option<String>,
	#[serde(rename = "outputType")]
	pub output_type: Option<String>,
	#[serde(rename = "overrideKey")]
	pub override_key: Option<String>,
	#[serde(rename = "preprocessorClassName")]
	pub preprocessor_class_name: Option<String>,
	#[serde(rename = "previewJsonData")]
	pub preview_json_data: Option<String>,
	#[serde(rename = "previewOtherData")]
	pub preview_other_data: Option<String>,
	#[serde(rename = "previewSourceObjectData")]
	pub preview_source_object_data: Option<String>,
	#[serde(rename = "previewXmlData")]
	pub preview_xml_data: Option<String>,
	#[serde(rename = "processSuperBulk")]
	pub process_super_bulk: Option<bool>,
	#[serde(rename = "requiredPermission")]
	pub required_permission: Option<String>,
	#[serde(rename = "responseCacheTtlMinutes")]
	pub response_cache_ttl_minutes: Option<f32>,
	#[serde(rename = "responseCacheType")]
	pub response_cache_type: Option<String>,
	#[serde(rename = "rollbackOnError")]
	pub rollback_on_error: Option<bool>,
	#[serde(rename = "sourceObject")]
	pub source_object: Option<String>,
	#[serde(rename = "sourceObjectDefault")]
	pub source_object_default: Option<bool>,
	#[serde(rename = "synchronousProcessThreshold")]
	pub synchronous_process_threshold: Option<f32>,
	#[serde(rename = "targetOutputDocumentIdentifier")]
	pub target_output_document_identifier: Option<String>,
	#[serde(rename = "targetOutputFileName")]
	pub target_output_file_name: Option<String>,
	#[serde(rename = "type")]
	pub _type: String,
	#[serde(rename = "uniqueName")]
	pub unique_name: Option<String>,
	#[serde(rename = "versionNumber")]
	pub version_number: Option<f32>,
	#[serde(rename = "xmlDeclarationRemoved")]
	pub xml_declaration_removed: Option<bool>,
	#[serde(rename = "xmlOutputTagsOrder")]
	pub xml_output_tags_order: Option<String>,
}
